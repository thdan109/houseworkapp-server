#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('express-server:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '216');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// Start SocketIo

const socketio = require('socket.io')
const io = socketio(server, {
    cors:true,
    // origins:["http://127.0.0.1:3000"],
})

const { addUser, removeUser, getUser, getUsersInRoom } = require('./users');
// const Chat = require("../model/chat.model")
io.on('connection', (socket) => {

    socket.on('join', ({ name, room }, callback) => {
         console.log('User had joined');   
         const { error, user } = addUser({ id: socket.id, name, room })

         if(error) return callback(error);
   
         socket.join(user.room)
    })

    socket.on('sendMessage', (message, callback) => {
        const user = getUser(socket.id)

        io.to(user.room).emit('message', { user: user.name, data: message })
 
      //   Chat.findOne({ room: user.room })
      //   .then(data => {
      //       const { messages } = data;
      //       messages.unshift(message[0]);
      //       const newMessages = messages
      //       const condition = {room: user.room}
      //       const handler = { messages: newMessages }
      //       Chat.updateOne(condition, handler)
      //       .then(() => {})
      //   })
    })

    socket.on('disconnect', () => {
        console.log('User had left !!');
    })
})

// End SocketIo






/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}




